// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/post/repository.go

// Package mock_post is a generated GoMock package.
package mock_post

import (
	models "lectures-2022-1/06_databases/99_hw/redditclone/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// DeleteCommentByID mocks base method.
func (m *MockPostRepository) DeleteCommentByID(commentID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommentByID", commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommentByID indicates an expected call of DeleteCommentByID.
func (mr *MockPostRepositoryMockRecorder) DeleteCommentByID(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommentByID", reflect.TypeOf((*MockPostRepository)(nil).DeleteCommentByID), commentID)
}

// DeletePostByID mocks base method.
func (m *MockPostRepository) DeletePostByID(postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostByID", postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostByID indicates an expected call of DeletePostByID.
func (mr *MockPostRepositoryMockRecorder) DeletePostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostByID", reflect.TypeOf((*MockPostRepository)(nil).DeletePostByID), postID)
}

// DeleteVoteFromPostByUserID mocks base method.
func (m *MockPostRepository) DeleteVoteFromPostByUserID(userID, postID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVoteFromPostByUserID", userID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVoteFromPostByUserID indicates an expected call of DeleteVoteFromPostByUserID.
func (mr *MockPostRepositoryMockRecorder) DeleteVoteFromPostByUserID(userID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVoteFromPostByUserID", reflect.TypeOf((*MockPostRepository)(nil).DeleteVoteFromPostByUserID), userID, postID)
}

// InsertComment mocks base method.
func (m *MockPostRepository) InsertComment(comment *models.Comment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertComment", comment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertComment indicates an expected call of InsertComment.
func (mr *MockPostRepositoryMockRecorder) InsertComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertComment", reflect.TypeOf((*MockPostRepository)(nil).InsertComment), comment)
}

// InsertPost mocks base method.
func (m *MockPostRepository) InsertPost(post *models.Post) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPost", post)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPost indicates an expected call of InsertPost.
func (mr *MockPostRepositoryMockRecorder) InsertPost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPost", reflect.TypeOf((*MockPostRepository)(nil).InsertPost), post)
}

// InsertVote mocks base method.
func (m *MockPostRepository) InsertVote(vote *models.Vote) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVote", vote)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertVote indicates an expected call of InsertVote.
func (mr *MockPostRepositoryMockRecorder) InsertVote(vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVote", reflect.TypeOf((*MockPostRepository)(nil).InsertVote), vote)
}

// SelectAllComments mocks base method.
func (m *MockPostRepository) SelectAllComments() ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllComments")
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllComments indicates an expected call of SelectAllComments.
func (mr *MockPostRepositoryMockRecorder) SelectAllComments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllComments", reflect.TypeOf((*MockPostRepository)(nil).SelectAllComments))
}

// SelectAllPosts mocks base method.
func (m *MockPostRepository) SelectAllPosts() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllPosts indicates an expected call of SelectAllPosts.
func (mr *MockPostRepositoryMockRecorder) SelectAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllPosts", reflect.TypeOf((*MockPostRepository)(nil).SelectAllPosts))
}

// SelectAllVotes mocks base method.
func (m *MockPostRepository) SelectAllVotes() ([]*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllVotes")
	ret0, _ := ret[0].([]*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllVotes indicates an expected call of SelectAllVotes.
func (mr *MockPostRepositoryMockRecorder) SelectAllVotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllVotes", reflect.TypeOf((*MockPostRepository)(nil).SelectAllVotes))
}

// SelectAuthorComment mocks base method.
func (m *MockPostRepository) SelectAuthorComment(commentID uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAuthorComment", commentID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAuthorComment indicates an expected call of SelectAuthorComment.
func (mr *MockPostRepositoryMockRecorder) SelectAuthorComment(commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAuthorComment", reflect.TypeOf((*MockPostRepository)(nil).SelectAuthorComment), commentID)
}

// SelectAuthorPost mocks base method.
func (m *MockPostRepository) SelectAuthorPost(postID uint64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAuthorPost", postID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAuthorPost indicates an expected call of SelectAuthorPost.
func (mr *MockPostRepositoryMockRecorder) SelectAuthorPost(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAuthorPost", reflect.TypeOf((*MockPostRepository)(nil).SelectAuthorPost), postID)
}

// SelectCommentsByCategory mocks base method.
func (m *MockPostRepository) SelectCommentsByCategory(categoryName string) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCommentsByCategory", categoryName)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCommentsByCategory indicates an expected call of SelectCommentsByCategory.
func (mr *MockPostRepositoryMockRecorder) SelectCommentsByCategory(categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCommentsByCategory", reflect.TypeOf((*MockPostRepository)(nil).SelectCommentsByCategory), categoryName)
}

// SelectCommentsByPostID mocks base method.
func (m *MockPostRepository) SelectCommentsByPostID(postID uint64) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCommentsByPostID", postID)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCommentsByPostID indicates an expected call of SelectCommentsByPostID.
func (mr *MockPostRepositoryMockRecorder) SelectCommentsByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCommentsByPostID", reflect.TypeOf((*MockPostRepository)(nil).SelectCommentsByPostID), postID)
}

// SelectCommentsByUsername mocks base method.
func (m *MockPostRepository) SelectCommentsByUsername(userLogin string) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCommentsByUsername", userLogin)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCommentsByUsername indicates an expected call of SelectCommentsByUsername.
func (mr *MockPostRepositoryMockRecorder) SelectCommentsByUsername(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCommentsByUsername", reflect.TypeOf((*MockPostRepository)(nil).SelectCommentsByUsername), userLogin)
}

// SelectPostByID mocks base method.
func (m *MockPostRepository) SelectPostByID(postID uint64) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostByID", postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostByID indicates an expected call of SelectPostByID.
func (mr *MockPostRepositoryMockRecorder) SelectPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostByID", reflect.TypeOf((*MockPostRepository)(nil).SelectPostByID), postID)
}

// SelectPostsByCategory mocks base method.
func (m *MockPostRepository) SelectPostsByCategory(categoryName string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostsByCategory", categoryName)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostsByCategory indicates an expected call of SelectPostsByCategory.
func (mr *MockPostRepositoryMockRecorder) SelectPostsByCategory(categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostsByCategory", reflect.TypeOf((*MockPostRepository)(nil).SelectPostsByCategory), categoryName)
}

// SelectPostsByUsername mocks base method.
func (m *MockPostRepository) SelectPostsByUsername(userLogin string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPostsByUsername", userLogin)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPostsByUsername indicates an expected call of SelectPostsByUsername.
func (mr *MockPostRepositoryMockRecorder) SelectPostsByUsername(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPostsByUsername", reflect.TypeOf((*MockPostRepository)(nil).SelectPostsByUsername), userLogin)
}

// SelectVotesByCategory mocks base method.
func (m *MockPostRepository) SelectVotesByCategory(categoryName string) ([]*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVotesByCategory", categoryName)
	ret0, _ := ret[0].([]*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVotesByCategory indicates an expected call of SelectVotesByCategory.
func (mr *MockPostRepositoryMockRecorder) SelectVotesByCategory(categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVotesByCategory", reflect.TypeOf((*MockPostRepository)(nil).SelectVotesByCategory), categoryName)
}

// SelectVotesByPostID mocks base method.
func (m *MockPostRepository) SelectVotesByPostID(postID uint64) ([]*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVotesByPostID", postID)
	ret0, _ := ret[0].([]*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVotesByPostID indicates an expected call of SelectVotesByPostID.
func (mr *MockPostRepositoryMockRecorder) SelectVotesByPostID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVotesByPostID", reflect.TypeOf((*MockPostRepository)(nil).SelectVotesByPostID), postID)
}

// SelectVotesByUsername mocks base method.
func (m *MockPostRepository) SelectVotesByUsername(userLogin string) ([]*models.Vote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectVotesByUsername", userLogin)
	ret0, _ := ret[0].([]*models.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectVotesByUsername indicates an expected call of SelectVotesByUsername.
func (mr *MockPostRepositoryMockRecorder) SelectVotesByUsername(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectVotesByUsername", reflect.TypeOf((*MockPostRepository)(nil).SelectVotesByUsername), userLogin)
}
