// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/post/usecase.go

// Package mock_post is a generated GoMock package.
package mock_post

import (
	errors "lectures-2022-1/06_databases/99_hw/redditclone/internal/helpers/errors"
	models "lectures-2022-1/06_databases/99_hw/redditclone/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostUsecase is a mock of PostUsecase interface.
type MockPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUsecaseMockRecorder
}

// MockPostUsecaseMockRecorder is the mock recorder for MockPostUsecase.
type MockPostUsecaseMockRecorder struct {
	mock *MockPostUsecase
}

// NewMockPostUsecase creates a new mock instance.
func NewMockPostUsecase(ctrl *gomock.Controller) *MockPostUsecase {
	mock := &MockPostUsecase{ctrl: ctrl}
	mock.recorder = &MockPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUsecase) EXPECT() *MockPostUsecaseMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockPostUsecase) AddComment(comment *models.Comment) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", comment)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockPostUsecaseMockRecorder) AddComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockPostUsecase)(nil).AddComment), comment)
}

// CreatePost mocks base method.
func (m *MockPostUsecase) CreatePost(user *models.User, post *models.Post) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", user, post)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostUsecaseMockRecorder) CreatePost(user, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUsecase)(nil).CreatePost), user, post)
}

// DeleteComment mocks base method.
func (m *MockPostUsecase) DeleteComment(user *models.User, postID, commentID uint64) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", user, postID, commentID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPostUsecaseMockRecorder) DeleteComment(user, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPostUsecase)(nil).DeleteComment), user, postID, commentID)
}

// DeletePost mocks base method.
func (m *MockPostUsecase) DeletePost(user *models.User, postID uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", user, postID)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostUsecaseMockRecorder) DeletePost(user, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostUsecase)(nil).DeletePost), user, postID)
}

// DownvotePost mocks base method.
func (m *MockPostUsecase) DownvotePost(user *models.User, postID uint64) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownvotePost", user, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// DownvotePost indicates an expected call of DownvotePost.
func (mr *MockPostUsecaseMockRecorder) DownvotePost(user, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownvotePost", reflect.TypeOf((*MockPostUsecase)(nil).DownvotePost), user, postID)
}

// GetPostByID mocks base method.
func (m *MockPostUsecase) GetPostByID(postID uint64) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostUsecaseMockRecorder) GetPostByID(postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostUsecase)(nil).GetPostByID), postID)
}

// GetPosts mocks base method.
func (m *MockPostUsecase) GetPosts() ([]*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostUsecaseMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostUsecase)(nil).GetPosts))
}

// GetPostsByCategory mocks base method.
func (m *MockPostUsecase) GetPostsByCategory(categoryName string) ([]*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", categoryName)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockPostUsecaseMockRecorder) GetPostsByCategory(categoryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockPostUsecase)(nil).GetPostsByCategory), categoryName)
}

// GetPostsByUser mocks base method.
func (m *MockPostUsecase) GetPostsByUser(userLogin string) ([]*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUser", userLogin)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetPostsByUser indicates an expected call of GetPostsByUser.
func (mr *MockPostUsecaseMockRecorder) GetPostsByUser(userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUser", reflect.TypeOf((*MockPostUsecase)(nil).GetPostsByUser), userLogin)
}

// UnvotePost mocks base method.
func (m *MockPostUsecase) UnvotePost(user *models.User, postID uint64) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePost", user, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UnvotePost indicates an expected call of UnvotePost.
func (mr *MockPostUsecaseMockRecorder) UnvotePost(user, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePost", reflect.TypeOf((*MockPostUsecase)(nil).UnvotePost), user, postID)
}

// UpvotePost mocks base method.
func (m *MockPostUsecase) UpvotePost(user *models.User, postID uint64) (*models.Post, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpvotePost", user, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpvotePost indicates an expected call of UpvotePost.
func (mr *MockPostUsecaseMockRecorder) UpvotePost(user, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpvotePost", reflect.TypeOf((*MockPostUsecase)(nil).UpvotePost), user, postID)
}
